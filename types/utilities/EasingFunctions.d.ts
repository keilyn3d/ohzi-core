export class EasingFunctions {
    static linear(x: any): any;
    static triangular(x: any): number;
    static ease_in_sine(x: any): number;
    static ease_out_sine(x: any): number;
    static ease_in_out_sine(x: any): number;
    static ease_in_cubic(x: any): number;
    static ease_out_cubic(x: any): number;
    static ease_in_out_cubic(x: any): number;
    static ease_in_quad(x: any): number;
    static ease_out_quad(x: any): number;
    static ease_in_out_quad(x: any): number;
    static ease_in_quart(x: any): number;
    static ease_out_quart(x: any): number;
    static ease_in_out_quart(x: any): number;
    static ease_in_quint(x: any): number;
    static ease_out_quint(x: any): number;
    static ease_in_out_quint(x: any): number;
    static ease_in_expo(x: any): number;
    static ease_out_expo(x: any): number;
    static ease_in_out_expo(x: any): number;
    static ease_in_circ(x: any): number;
    static ease_out_circ(x: any): number;
    static ease_in_out_circ(x: any): number;
    static ease_in_back(x: any): number;
    static ease_out_back(x: any): number;
    static ease_in_out_back(x: any): number;
    static ease_in_elastic(x: any): number;
    static ease_out_elastic(x: any): number;
    static ease_in_out_elastic(x: any): number;
    static ease_in_bounce(x: any): number;
    static ease_out_bounce(x: any): number;
    static ease_in_out_bounce(x: any): number;
    static heartbeat(t: any): number;
}
